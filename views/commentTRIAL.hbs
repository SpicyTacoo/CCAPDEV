<!DOCTYPE html>
<html>
    <head>
        <title>Establishments</title>
        <link rel="icon" type="image/png" href="/icons/logo.png" sizes="32x32">
        <link rel="stylesheet" href="/css/reviews.css">
        <link rel="stylesheet" href="/css/response.css">
    </head>

    <header>
        {{> header}}
    </header>

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .outer-box {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 16px;
            margin: 16px;
            width: 1000px;
        }

        .post {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 16px;
            margin: 16px;
        }

        .post-header {
            display: flex;
            align-items: center;
        }

        .post-header img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .post-userinfo h2 {
            margin: 0;
            font-size: 16px;
        }

        .post-userinfo p {
            margin: 0;
            font-size: 12px;
            color: #888;
        }

        .post-content {
            margin: 10px 0;
        }

        #comments-container {
            display: flex;
            flex-direction: column;
        }

        .post-actions button {
            background-color: #f0f2f5;
            border: none;
            padding: 8px 12px;
            margin-right: 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .post-actions button:hover {
            background-color: #ddd;
        }
    </style>

    <body>
        <div style="display: flex; justify-content: center; align-items: center; margin-top:100px">
            <div class="outer-box">
                <div class="post">
                {{#each dataToRender.reviewData}}
                    <div class="post-header">
                        {{#each pic}}
                            <img src="{{profilePicture}}" alt="{{shortDescription}}" style="width: 30px; height: 30px; border-radius:50%; margin-right: 10px; float:left">
                        {{/each}}
                        <div class="post-userinfo">
                            <h2 style="font-weight: bold;"><a href="/view%20profile/{{this.username}}" style="text-decoration: none; color: black;"
                                onmouseover="this.style.color='blue';" onmouseout="this.style.color='black';">{{this.username}}</a>
                            </h2>
                            <p class="rating">⭐ {{this.ratings}} out of 5</p>
                        </div>
                    </div>
                    <div class="post-content">
                        <p class="reply-text">{{this.post}}
                            {{#if this.isEdited}}
                                <span style="font-style: italic; font-size: 12px; color: #666;">(Edited)</span>
                            {{/if}}
                        </p>
                    </div>
                    {{#if this.pictures}}
                        <div>
                            <img src="{{this.pictures}}" style="width: 30px; height: 30px; float:left;">
                        </div><br><br>
                        {{/if}}
                    {{/each}}
                </div>
            </div>
        </div>

        <div id="comments-container" style="min-height: auto;">
                <h2 style="color: white;">Replies</h2>

                {{#each dataToRender.filteredResultLIKE}}
                    <div class="comment" ids="{{this._id}}">
                        {{#each pic}}
                            <img src="{{profilePicture}}" alt="{{shortDescription}}" style="width: 30px; height: 30px; border-radius:50%; margin-right: 10px; float:left">
                        {{/each}}                        
                        <div class="owner-container">
                            <p class="owner-name" style="font-weight: bold;"><a href="/view%20profile/{{this.author}}" style="text-decoration: none; color: black;"
                                onmouseover="this.style.color='blue';" onmouseout="this.style.color='black';">{{this.author}}</a>
                            </p><br>
                        </div>
                        
                        <p class="reply-text">{{this.content}}
                            {{#if this.isEdited}}
                                <span style="font-style: italic; font-size: 12px; color: #666;">(Edited)</span>
                            {{/if}}
                            {{!-- <img src="{{this.pictures}}" alt="{{shortDescription}}" style="width: 30px; height: 30px; border-radius:50%; margin-right: 10px; float:left"> --}}
                        </p>

                        <div class="comment-actions">
                            {{#if isLoggedIn}}
                                {{#when ../dataToRender.currentUser 'eq' this.author}}
                                    <button class="edit-button">Edit</button>
                                    <button class="delete-button">Delete</button>
                                {{/when}}
                            {{!-- <button class="reply-button">Reply</button> --}}
                            {{else}}
                                {{#when ../dataToRender.currentUser 'eq' this.author }}
                                    <button class="edit-button" onclick="redirectToLogin()">Edit</button>
                                    <button class="delete-button" onclick="redirectToLogin()">Delete</button>
                                {{/when}}
                            {{!-- <button class="reply-button" onclick="redirectToLogin()">Reply</button> --}}
                            {{/if}}
                            <button class="like-btn" style="color: red;" id="like-btn-{{this._id}}" onclick="likeComment('{{this._id}}')">▲</button>
                            <span class="like-count" style="color: red;" id="like-count-{{this._id}}">{{this.liked.length}}</span>
                            <button class="dislike-btn active" id="dislike-btn-{{this._id}}" onclick="dislikeComment('{{this._id}}')">▼</button>
                            <span class="dislike-count" id="dislike-count-{{this._id}}">{{this.disliked.length}}</span>
                            <button class="clear-btn" style="margin-left: 5px;" data-comment-id="{{this._id}}">Clear Reactions</button>
                            {{!-- <span style="float: right; color:black; cursor: pointer;" class="view-comment-button" data-post="{{this.post}}">View Comments</span> --}}
                        </div>
                    </div>
                {{/each}}

                {{#each dataToRender.filteredResultDISLIKE}}
                    <div class="comment" ids="{{this._id}}">
                        {{#each pic}}
                            <img src="{{profilePicture}}" alt="{{shortDescription}}" style="width: 30px; height: 30px; border-radius:50%; margin-right: 10px; float:left">
                        {{/each}}                        
                        <div class="owner-container">
                            <p class="owner-name" style="font-weight: bold;"><a href="/view%20profile/{{this.author}}" style="text-decoration: none; color: black;"
                                onmouseover="this.style.color='blue';" onmouseout="this.style.color='black';">{{this.author}}</a>
                            </p><br>
                        </div>
                        
                        <p class="reply-text">{{this.content}}
                            {{#if this.isEdited}}
                                <span style="font-style: italic; font-size: 12px; color: #666;">(Edited)</span>
                            {{/if}}
                            {{!-- add post pictures --}}
                        </p>

                        <div class="comment-actions">
                            {{#if isLoggedIn}}
                                {{#when ../dataToRender.currentUser 'eq' this.author}}
                                    <button class="edit-button">Edit</button>
                                    <button class="delete-button">Delete</button>
                                {{/when}}
                            {{!-- <button class="reply-button">Reply</button> --}}
                            {{else}}
                                {{#when ../dataToRender.currentUser 'eq' this.author }}
                                    <button class="edit-button" onclick="redirectToLogin()">Edit</button>
                                    <button class="delete-button" onclick="redirectToLogin()">Delete</button>
                                {{/when}}
                            {{!-- <button class="reply-button" onclick="redirectToLogin()">Reply</button> --}}
                            {{/if}}
                            <button class="like-btn"  id="like-btn-{{this._id}}" onclick="likeComment('{{this._id}}')">▲</button>
                            <span class="like-count"  id="like-count-{{this._id}}">{{this.liked.length}}</span>
                            <button class="dislike-btn active" style="color: blue;" id="dislike-btn-{{this._id}}" onclick="dislikeComment('{{this._id}}')">▼</button>
                            <span class="dislike-count" style="color: blue;" id="dislike-count-{{this._id}}">{{this.disliked.length}}</span>
                            <button class="clear-btn" style="margin-left: 5px;" data-comment-id="{{this._id}}">Clear Reactions</button>
                            {{!-- <span style="float: right; color:black; cursor: pointer;" class="view-comment-button" data-post="{{this.post}}">View Comments</span> --}}
                        </div>
                    </div>
                {{/each}}
                {{#each dataToRender.filteredResultNEITHER}}
                    <div class="comment" ids="{{this._id}}">
                        {{#each pic}}
                            <img src="{{profilePicture}}" alt="{{shortDescription}}" style="width: 30px; height: 30px; border-radius:50%; margin-right: 10px; float:left">
                        {{/each}}                        
                        <div class="owner-container">
                            <p class="owner-name" style="font-weight: bold;"><a href="/view%20profile/{{this.author}}" style="text-decoration: none; color: black;"
                                onmouseover="this.style.color='blue';" onmouseout="this.style.color='black';">{{this.author}}</a>
                            </p><br>
                        </div>
                        
                        <p class="reply-text">{{this.content}}
                            {{#if this.isEdited}}
                                <span style="font-style: italic; font-size: 12px; color: #666;">(Edited)</span>
                            {{/if}}
                        </p>

                        <div class="comment-actions">
                            {{#if isLoggedIn}}
                                {{#when ../dataToRender.currentUser 'eq' this.author}}
                                    <button class="edit-button">Edit</button>
                                    <button class="delete-button">Delete</button>
                                {{/when}}
                            {{!-- <button class="reply-button">Reply</button> --}}
                            {{else}}
                                {{#when ../dataToRender.currentUser 'eq' this.author }}
                                    <button class="edit-button" onclick="redirectToLogin()">Edit</button>
                                    <button class="delete-button" onclick="redirectToLogin()">Delete</button>
                                {{/when}}
                            {{!-- <button class="reply-button" onclick="redirectToLogin()">Reply</button> --}}
                            {{/if}}
                            <button class="like-btn" id="like-btn-{{this._id}}" onclick="likeComment('{{this._id}}')">▲</button>
                            <span class="like-count" id="like-count-{{this._id}}">{{this.liked.length}}</span>
                            <button class="dislike-btn active" id="dislike-btn-{{this._id}}" onclick="dislikeComment('{{this._id}}')">▼</button>
                            <span class="dislike-count" id="dislike-count-{{this._id}}">{{this.disliked.length}}</span>
                            <button class="clear-btn" style="margin-left: 5px;" data-comment-id="{{this._id}}">Clear Reactions</button>
                        </div>
                    </div>
                {{/each}}
            
                

                <script>
                    const viewcommentButtons = document.querySelectorAll('.view-comment-button');
                    viewcommentButtons.forEach((button) => {
                        button.addEventListener('click', () => {
                            const post = button.getAttribute('data-post');
                            const encodedPost = encodeURIComponent(post);
                            window.location.href = `/trial/${encodedPost}/post`;
                        });
                    });

                    const clearButtons = document.querySelectorAll('.clear-btn');
                    clearButtons.forEach((clearButton) => {
                        clearButton.addEventListener('click', function() {
                            const commentId = this.dataset.commentId;
                            clear(commentId);
                        });
                    });
            </script>

            {{#if isLoggedIn}}
            <script>
                function editComment(commentElement, postContent, commentId) {
                    window.location.href = `/confirmEDITcomment/${postContent}/${commentId}`;
                }

                function deleteComment(commentElement, postContent, commentId) {
                    window.location.href = `/confirmDELETEcomment/${postContent}/${commentId}`;
                }

                // Add event listeners to all edit buttons
                const editButtons = document.querySelectorAll('.edit-button');
                editButtons.forEach((button) => {
                    const commentElement = button.parentElement.parentElement;
                    button.addEventListener('click', function () {
                        const origpostContent = commentElement.querySelector('.reply-text').textContent;
                        const postContent = origpostContent.replace(/\s*\(Edited\)\s*$/, '');
                        const commentId = commentElement.getAttribute('ids');
                       // Call the deleteComment function and pass the post content as an argument
                        editComment(commentElement, postContent.trim(), commentId);
                    });
                });

                // Add event listeners to all delete buttons
                const deleteButtons = document.querySelectorAll('.delete-button');
                deleteButtons.forEach((button) => {
                    const commentElement = button.parentElement.parentElement;
                    button.addEventListener('click', function () {
                        const origpostContent = commentElement.querySelector('.reply-text').textContent;
                        const postContent = origpostContent.replace(/\s*\(Edited\)\s*$/, '');
                        const commentId = commentElement.getAttribute('ids');

                        // Call the deleteComment function and pass the post content as an argument
                        deleteComment(commentElement, postContent, commentId);
                    });
                });

                function likeComment(commentId) {
                    fetch(`/like-comment-2/${commentId}`, {
                        method: 'POST',
                        credentials: 'include', // Include cookies for authentication (if required)
                    })
                    .then((response) => response.json())
                    .then((data) => {
                    if (data.success) {
                        // Update the like count
                        const likeCountElement = document.getElementById(`like-count-${commentId}`);
                        likeCountElement.textContent = data.likeCount;
                        // Update the dislike count in case the user unliked the comment
                        const dislikeCountElement = document.getElementById(`dislike-count-${commentId}`);
                        dislikeCountElement.textContent = data.dislikeCount;
                                location.reload();

                    } else {
                        // Handle the case where the like action failed (e.g., user not logged in)
                        alert('Failed to like the comment. Please try again later.');
                    }
                    })
                    .catch((error) => {
                    console.error('Error liking the comment:', error);
                    });
                }

                // Function to handle the dislike action for a comment
                function dislikeComment(commentId) {
                    fetch(`/dislike-comment-2/${commentId}`, {
                        method: 'POST',
                        credentials: 'include', // Include cookies for authentication (if required)
                    })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            // Update the dislike count
                            const dislikeCountElement = document.getElementById(`dislike-count-${commentId}`);
                            dislikeCountElement.textContent = data.dislikeCount;
                            // Update the like count in case the user undisliked the comment
                            const likeCountElement = document.getElementById(`like-count-${commentId}`);
                            likeCountElement.textContent = data.likeCount;
                                    location.reload();
                        } else {
                            // Handle the case where the dislike action failed (e.g., user not logged in)
                            alert('Failed to dislike the comment. Please try again later.');
                        }
                    })
                    .catch((error) => {
                        console.error('Error disliking the comment:', error);
                    });
                }

                function clear(commentId) {
                    fetch(`/clear-reactions-2/${commentId}`, {
                        method: 'POST',
                        credentials: 'include', // Include cookies for authentication (if required)
                    })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            const likeButton = document.getElementById(`like-btn-${commentId}`);
                            likeButton.style.color = "black"
                            const dislikeButton = document.getElementById(`dislike-btn-${commentId}`);
                            dislikeButton.style.color = "black"

                            const likeCount = document.getElementById(`like-count-${commentId}`);
                            likeCount.style.color = "black"
                            const dislikeCount = document.getElementById(`dislike-count-${commentId}`);
                            dislikeCount.style.color = "black"

                            console.log('Reactions cleared successfully.');
                            location.reload();

                        } else {
                            alert('Failed to clear reactions. Please try again later.');
                        }
                    })
                    .catch((error) => {
                    console.error('Error clearing reactions:', error);
                    });
                }
            
            </script>
            {{else}}
            <script>
                function likeComment(commentId) {           
                    window.location.href = '/login';
                }

                function dislikeComment(commentId) {
                    window.location.href = '/login';
                }

                function clear(commentId) {                    
                    window.location.href = '/login';
                }
            </script>
            {{/if}}
        </div>
            
        {{#if isLoggedIn}}
        <div style="display: flex; justify-content: center;">
            <button type="submit" class="write-review-btn" onclick="openPopup()">Write a Reply</button>
            <div class="review-container-popup" id="popup">
                <div class="restaurant-name">
                    <p>{{restaurantData.restaurant}}</p>
                </div>
        
                <div class="user-container">
                    <div><img src="{{pic}}" class="profile"/></div>
                        <div class="user">
                            <a class="name">{{username}}</a>
                            <a class="notice">Posting publicly</a>
                        </div>
                    </div>
        
                    {{!-- <div class="stars">
                        <i class="fa fa-star fa-2x"></i>
                        <i class="fa fa-star fa-2x"></i>
                        <i class="fa fa-star fa-2x"></i>
                        <i class="fa fa-star fa-2x"></i>
                        <i class="fa fa-star fa-2x"></i>
                    </div>
                    <div id="rating-value"></div> --}}
        
                    <div class="write-review">
                        <form id="review-form">
                            <textarea class="textbox" id="comment-input" placeholder="Share details of your experience at this place" oninput="validateTextarea()"></textarea>
                            <div class="button-container">
                                {{!-- <div><input type="file" id="media-input" accept="image/* video/*"></div> --}}
                                <input type="button" value="Cancel" class="button" onclick="closePopup()">
                                <input type="submit" value="Post" class="button" onclick="closePopup()" disabled id="postButton">
                            </div>
                        </form>
                        <script>
                            function validateTextarea() {
                                const textarea = document.getElementById('comment-input');
                                const postButton = document.getElementById('postButton');
                                const isTextareaEmpty = textarea.value.trim() === '';

                                postButton.disabled = isTextareaEmpty;
                            }
                        </script>
                    </div>
                </div>
            </div>

            <script>
                let popup = document.getElementById("popup");

                function openPopup() {
                    popup.classList.add("open-popup");
                }

                function closePopup() {
                    // document.getElementById("comment-input").value = "";
                    popup.classList.remove("open-popup");
                }

                /** ADDED FOR POSTING REVIEWS */ 
            document.getElementById('review-form').addEventListener('submit', async(event) => {
                event.preventDefault();
                const serializedDataToRender = `{{{serializedDataToRender}}}`; // Unescape the HTML entities (using triple curly braces)
                const dataToRender = JSON.parse(serializedDataToRender);
                const hi = dataToRender.reviewData;
                console.log(hi[0].restaurant);
                const commenterId = "{{userId}}"; 
                const parentPostId = hi[0]._id;
                const postText = document.getElementById('comment-input').value.trim();
                console.log(postText);
                const username = "{{username}}";
                const isEdited = false;
                const isDeleted = false;
                const restaurant = hi[0].restaurant;
                const disliked = [];
                const liked = [];
                const resto = hi[0].resto;
                const parentPostContent = hi[0].post;
                const decodedParentPostContent = parentPostContent.replace(/&#x27;/g, "'");

                console.log(commenterId);
                console.log(parentPostId);
                console.log(postText);
                console.log(username);
                console.log(restaurant);
                console.log(resto);
                console.log(decodedParentPostContent);


                const formData = {
                    commenter: commenterId,
                    parentPost: parentPostId,
                    content: postText,
                    author: username,
                    isEdited: isEdited,
                    isDeleted: isDeleted,
                    restaurant: restaurant,
                    disliked: disliked,
                    liked: liked,
                    resto: resto,
                    parentPostContent: decodedParentPostContent
                };

                try {
                    const response = await fetch('/trial/:parameter/post', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                });

                

                //alert('Reply added successfully!');
                // You can redirect the user to another page or perform other actions after successful submission
                } catch (error) {
                    console.error('Error adding reply:', error);
                    alert('Failed to add reply. Please try again.');
                } 
            });
            </script>
        </div>


        </div>
        {{else}}
        <script>
            function redirectToLogin() {
                window.location.href = '/login';
            }
        </script>
        {{/if}}
    </body>
</html>
